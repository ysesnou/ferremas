import BaseTransaction from '../../common/base_transaction';
import Options from '../../common/options';
declare class MallInscription extends BaseTransaction {
    /**
     * Constructor class MallInscription Oneclick.
     * @param options You can pass options to use a custom configuration.
     */
    constructor(options: Options);
    /**
     * Creates and returns an instance of `MallInscription` configured for the integration environment.
     *
     * @param commerceCode The commerce code.
     * @param apiKey The API key used for authentication.
     * @return A new instance of `MallInscription` configured for the test environment (Environment.Integration).
     */
    static buildForIntegration(commerceCode: string, apiKey: string): MallInscription;
    /**
     * Creates and returns an instance of `MallInscription` configured for the production environment.
     *
     * @param commerceCode The commerce code.
     * @param apiKey The API key used for authentication.
     * @return A new instance of `MallInscription` configured for the production environment (Environment.Production).
     */
    static buildForProduction(commerceCode: string, apiKey: string): MallInscription;
    /**
     * Starts a card inscription process
     * @param username Cardholder's username
     * @param email Cardholder's email
     * @param responseUrl URL to which Transbank will redirect after cardholder finish enrolling
     * their card
     */
    start(username: string, email: string, responseUrl: string): Promise<any>;
    /**
     * This finalizes the card enrolling process
     * @param token Unique inscription identifier
     */
    finish(token: string): Promise<any>;
    /**
     * This deletes an inscription
     * @param tbkUser Cardholder's card TBK user assigned by Transbank and returned in
     * Inscription.finish
     * @param username Cardholder's username
     */
    delete(tbkUser: string, username: string): Promise<any>;
}
export default MallInscription;
